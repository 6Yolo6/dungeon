#include "framework.h"
#include "µÿ¿Œ.h"

int cnt1 = 0;
void PrintMap1(HDC hdc, HINSTANCE hInst, HDC hMenDC)
{
	HBITMAP hBmpwall = nullptr; //ŒªÕº
	HBITMAP hBmpchest1 = nullptr;
	HBITMAP hBmpchest2 = nullptr;
	HBITMAP hBmpchest3 = nullptr;
	HBITMAP hBmpkey1 = nullptr;
	HBITMAP hBmpkey2 = nullptr;
	HBITMAP hBmpkey3 = nullptr;
	HBITMAP hBmpjar = nullptr;
	HBITMAP hBmpfire = nullptr;

	HDC hdcBmpwall = CreateCompatibleDC(hdc);
	HDC hdcBmpchest1 = CreateCompatibleDC(hdc);
	HDC hdcBmpchest2 = CreateCompatibleDC(hdc);
	HDC hdcBmpchest3 = CreateCompatibleDC(hdc);
	HDC hdcBmpkey1 = CreateCompatibleDC(hdc);
	HDC hdcBmpkey2 = CreateCompatibleDC(hdc);
	HDC hdcBmpkey3 = CreateCompatibleDC(hdc);
	HDC hdcBmpfire = CreateCompatibleDC(hdc);

	hBmpchest1 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP6));
	hBmpchest2 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP7));
	hBmpkey1 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP10));
	hBmpkey2 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP11));
	if (2 <= level)
	{
		hBmpchest3 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP8));
		hBmpkey3 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP12));
	}
	hBmpwall = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP1));
	hBmpfire = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP5));

	SelectObject(hdcBmpwall, hBmpwall);
	SelectObject(hdcBmpchest1, hBmpchest1);
	SelectObject(hdcBmpchest2, hBmpchest2);
	SelectObject(hdcBmpchest3, hBmpchest3);
	SelectObject(hdcBmpkey1, hBmpkey1);
	SelectObject(hdcBmpkey2, hBmpkey2);
	SelectObject(hdcBmpkey3, hBmpkey3);
	SelectObject(hdcBmpfire, hBmpfire);

	//µ⁄»˝≤Ω:‘⁄ƒ⁄¥ÊºÊ»›DC…œªÊ÷∆∏˜÷÷Õº–Œ
	for (int i = 0; i < 31; i++)
	{
		for (int j = 0; j < 31; j++)
		{
			if (frog_cnt)
			{
				if (abs(j - Player.x) + abs(i - Player.y) < 6)
				{
					StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 8 + 12 * 7, 3 + 12 * 2, 12, 12, SRCCOPY);//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
					if (Map[i][j] == 1)
						StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 2 + 12, 1, 12, 12, SRCCOPY);//«Ω
					else if (Map[i][j] == 3)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpfire, 20 + 12 * 19, 5 + 4 * 12, 12, 12, RGB(0, 0, 0));//ª∞—
					else if (Map[i][j] == 4)
					{
						//StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 11 + 10 * 12, 1, 12, 12, SRCCOPY);//≥ˆø⁄
						if (1 == level && chest1 && chest2)
						{
							static bool cnt = true;
							if (cnt)
							{
								PlaySound(L"Resource\\vv.wav", NULL, SND_FILENAME | SND_ASYNC);
								cnt = false;
							}
							StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 11 + 10 * 12, 1, 12, 12, SRCCOPY);//≥ˆø⁄
						}
						else if (2 <= level && chest1 && chest2 && chest3)
						{
							static bool cnt = true;
							if (cnt)
							{
								PlaySound(L"Resource\\vv.wav", NULL, SND_FILENAME | SND_ASYNC);
								cnt = false;
							}
							StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 11 + 10 * 12, 1, 12, 12, SRCCOPY);//≥ˆø⁄
						}
					}
					//else if (Map[i][j] == 5)
					//	TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Monster.x) * 32, 300 + (i - Monster.y) * 32, 32, 32, hdcBmpwall, 18 + 17 * 12, 9 + 8 * 12, 12, 12, RGB(0, 0, 0));//π÷
					else if (Map[i][j] == 6)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest1, 0, 0, 35, 35, RGB(255, 255, 255));//∫Ï±¶œ‰
					else if (Map[i][j] == 7)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest2, 0, 0, 35, 35, RGB(255, 255, 255));//¿∂±¶œ‰
					else if (Map[i][j] == 8)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest3, 0, 0, 35, 35, RGB(255, 255, 255));//¬Ã±¶œ‰
					else if (Map[i][j] == 9)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 7 + 6 * 12, 19 + 18 * 12, 12, 12, RGB(0, 0, 0));//π«Õ∑1
					else if (Map[i][j] == 10)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 9 + 8 * 12, 19 + 18 * 12, 12, 12, RGB(0, 0, 0));//π«Õ∑2
					else if (Map[i][j] == 20)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest1, 3 * 35, 35, 35, 35, RGB(255, 255, 255));//∫Ï±¶œ‰
					else if (Map[i][j] == 21)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest2, 3 * 35, 35, 35, 35, RGB(255, 255, 255));//¿∂±¶œ‰
					else if (Map[i][j] == 22)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest3, 3 * 35, 35, 35, 35, RGB(255, 255, 255));//¬Ã±¶œ‰
					else if (Map[i][j] == 14 || Map[i][j] == 13 || Map[i][j] == 12 || Map[i][j] == 11 || Map[i][j] == 16 || Map[i][j] == 17 || Map[i][j] == 18 || Map[i][j] == 19)
					{
						if (Map[i][j] == 13 && !key3 && key3_cnt)
						{
							TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpkey3, 0, 0, 12, 12, RGB(0, 0, 0));
						}
						else if (Map[i][j] == 12 && !key2 && key2_cnt)
						{
							TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpkey2, 0, 0, 12, 12, RGB(0, 0, 0));
						}
						else if (Map[i][j] == 11 && !key1 && key1_cnt)
						{
							TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpkey1, 0, 0, 12, 12, RGB(0, 0, 0));
						}
						else {
							TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32 + 2, 300 + (i - Player.y) * 32 - 1, 32, 32, hdcBmpwall, 17 + 16 * 12, 17 + 16 * 12, 12, 12, RGB(0, 0, 0));//πﬁ◊”
						}
					}
					else if (Map[i][j] == 15)
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32 + 2, 300 + (i - Player.y) * 32 - 1, 32, 32, hdcBmpwall, 6 + 5 * 12, 8 + 7 * 12, 12, 12, RGB(0, 0, 0));//πﬁ◊”∆∆ÀÈ
				}
			}
			else

			{
				StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 8 + 12 * 7, 3 + 12 * 2, 12, 12, SRCCOPY);//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
				if (Map[i][j] == 1)
					StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 2 + 12, 1, 12, 12, SRCCOPY);//«Ω
				else if (Map[i][j] == 3)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpfire, 20 + 12 * 19, 5 + 4 * 12, 12, 12, RGB(0, 0, 0));//ª∞—
				else if (Map[i][j] == 4)
				{
					//StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 11 + 10 * 12, 1, 12, 12, SRCCOPY);//≥ˆø⁄
					if (1 == level && chest1 && chest2)
					{
						static bool cnt = true;
						if (cnt)
						{
							PlaySound(L"Resource\\vv.wav", NULL, SND_FILENAME | SND_ASYNC);
							cnt = false;
						}
						StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 11 + 10 * 12, 1, 12, 12, SRCCOPY);//≥ˆø⁄
					}
					else if (2 <= level && chest1 && chest2 && chest3)
					{
						static bool cnt = true;
						if (cnt)
						{
							PlaySound(L"Resource\\vv.wav", NULL, SND_FILENAME | SND_ASYNC);
							cnt = false;
						}
						StretchBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 11 + 10 * 12, 1, 12, 12, SRCCOPY);//≥ˆø⁄
					}
				}
				//else if (Map[i][j] == 5)
				//	TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Monster.x) * 32, 300 + (i - Monster.y) * 32, 32, 32, hdcBmpwall, 18 + 17 * 12, 9 + 8 * 12, 12, 12, RGB(0, 0, 0));//π÷
				else if (Map[i][j] == 6)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest1, 0, 0, 35, 35, RGB(255, 255, 255));//∫Ï±¶œ‰
				else if (Map[i][j] == 7)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest2, 0, 0, 35, 35, RGB(255, 255, 255));//¿∂±¶œ‰
				else if (Map[i][j] == 8)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest3, 0, 0, 35, 35, RGB(255, 255, 255));//¬Ã±¶œ‰
				else if (Map[i][j] == 9)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 7 + 6 * 12, 19 + 18 * 12, 12, 12, RGB(0, 0, 0));//π«Õ∑1
				else if (Map[i][j] == 10)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpwall, 9 + 8 * 12, 19 + 18 * 12, 12, 12, RGB(0, 0, 0));//π«Õ∑2
				else if (Map[i][j] == 20)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest1, 3 * 35, 35, 35, 35, RGB(255, 255, 255));//∫Ï±¶œ‰
				else if (Map[i][j] == 21)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest2, 3 * 35, 35, 35, 35, RGB(255, 255, 255));//¿∂±¶œ‰
				else if (Map[i][j] == 22)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 38, hdcBmpchest3, 3 * 35, 35, 35, 35, RGB(255, 255, 255));//¬Ã±¶œ‰
				else if (Map[i][j] == 14 || Map[i][j] == 13 || Map[i][j] == 12 || Map[i][j] == 11 || Map[i][j] == 16 || Map[i][j] == 17 || Map[i][j] == 18 || Map[i][j] == 19)
				{
					if (Map[i][j] == 13 && !key3 && key3_cnt)
					{
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpkey3, 0, 0, 12, 12, RGB(0, 0, 0));
					}
					else if (Map[i][j] == 12 && !key2 && key2_cnt)
					{
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpkey2, 0, 0, 12, 12, RGB(0, 0, 0));
					}
					else if (Map[i][j] == 11 && !key1 && key1_cnt)
					{
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32, 300 + (i - Player.y) * 32, 32, 32, hdcBmpkey1, 0, 0, 12, 12, RGB(0, 0, 0));
					}
					else {
						TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32 + 2, 300 + (i - Player.y) * 32 - 1, 32, 32, hdcBmpwall, 17 + 16 * 12, 17 + 16 * 12, 12, 12, RGB(0, 0, 0));//πﬁ◊”
					}
				}
				else if (Map[i][j] == 15)
					TransparentBlt(hMenDC, 180 + 32 + 32 + (j - Player.x) * 32 + 2, 300 + (i - Player.y) * 32 - 1, 32, 32, hdcBmpwall, 6 + 5 * 12, 8 + 7 * 12, 12, 12, RGB(0, 0, 0));//πﬁ◊”∆∆ÀÈ
			}
		}
	}

	//◊Ó∫Û≤ª“™Õ¸º« Õ∑≈◊ ‘¥
	DeleteObject(hdcBmpwall);
	DeleteObject(hdcBmpchest1);
	DeleteObject(hdcBmpchest2);
	DeleteObject(hdcBmpchest3);
	DeleteObject(hdcBmpkey1);
	DeleteObject(hdcBmpkey2);
	DeleteObject(hdcBmpkey3);
	DeleteObject(hdcBmpfire);
	DeleteDC(hdcBmpwall);
	DeleteDC(hdcBmpchest1);
	DeleteDC(hdcBmpchest2);
	DeleteDC(hdcBmpchest3);
	DeleteDC(hdcBmpkey1);
	DeleteDC(hdcBmpkey2);
	DeleteDC(hdcBmpkey3);
	DeleteDC(hdcBmpfire);
}
void PlayerMove(HWND hWnd, WPARAM wParam)
{
	int x = Player.x, y = Player.y;
	if (wParam == ' ' && text_cnt1 <= 8)
	{
		text_cnt1++;
		return;
	}
	if (!show && text_cnt1 == 9 && wParam == ' ' && (text_cnt < 3 || text_cnt == 5 || text_cnt == 7 || text_cnt == 9 || text_cnt == 11 || text_cnt == 13 || text_cnt == 15 || text_cnt == 17 || text_cnt == 19 || text_cnt == 21 || text_cnt == 23 || text_cnt == 25||text_cnt==29||text_cnt==31))
	{
		text_cnt++;
		return;
	}
	if (text_cnt == 30)
		exit(0);
	if (!(text_cnt < 3 || text_cnt == 5 || text_cnt == 7 || text_cnt == 9 || text_cnt == 11 || text_cnt == 13 || text_cnt == 15 || text_cnt == 17 || text_cnt == 19 || text_cnt == 21 || text_cnt == 23 || text_cnt == 25 || text_cnt == 29))
	{
		if (wParam)
		{
			if (wParam == 'A')
			{
				Player.x -= 1;
				autoPathfinding();
			}
			else if (wParam == 'W')
			{
				Player.y -= 1;
				autoPathfinding();
			}
			else if (wParam == 'D')
			{
				Player.x += 1;
				autoPathfinding();
			}
			else if (wParam == 'S')
			{
				Player.y += 1;
				autoPathfinding();
			}
			else if (wParam == 'K')
			{
				if (frog_cnt)
					frog_cnt = false;
				else
					frog_cnt = true;
			}
			else if (wParam == 'H')
			{
				if (flag_h)
					flag_h = false;
				else
					flag_h = true;
			}
			else if (wParam == 'J'&&run>0)
			{
				while (1)
				{
					int i = (rand() % 29) + 1;
					int j = (rand() % 29) + 1;
					Player.x = i;
					Player.y = j;
					if (Map[Player.y][Player.x] == 0)
						break;
				}
				run--;
			}

		}
		if (Map[Player.y][Player.x] == 4)
		{
			if (1 == level && chest1 && chest2)
			{
				level++;
				next_cnt = false;
				PlaySound(NULL, NULL, SND_FILENAME | SND_ASYNC);
				SendMessage(hWnd, CREATEMAP, 0, 0);

			}
			else if (level && chest1 && chest2 && chest3)
			{
				level++;
				next_cnt = false;
				PlaySound(NULL, NULL, SND_FILENAME | SND_ASYNC);
				SendMessage(hWnd, CREATEMAP, 0, 0);
			}
		}
		PosJudge(y, x, wParam);
	}

}


void PrintPlayer(HDC hdc, HINSTANCE hInst, HDC hMenDC)
{
	HBITMAP hBmp = nullptr; //ŒªÕº
	HDC hdcBmp = CreateCompatibleDC(hdc);
	hBmp = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP25));
	SelectObject(hdcBmp, hBmp);
	//StretchBlt(hMenDC, 180, 300, 32, 32, hdcBmp, 3*32, 0, SIZE, SIZE, SRCCOPY);//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
	TransparentBlt(hMenDC, 180 + 64-8, 280, 40, 52, hdcBmp, 0, 20, 140, 190, RGB(255, 255, 255));
	DeleteObject(hdcBmp);

}
void PrintEnermy(HDC hdc, HINSTANCE hInst, HDC hMenDC)
{
	HBITMAP hBmp = nullptr; //ŒªÕº
	HDC hdcBmp = CreateCompatibleDC(hdc);
	hBmp = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP1));
	SelectObject(hdcBmp, hBmp);
	//StretchBlt(hMenDC, 180, 300, 32, 32, hdcBmp, 3*32, 0, SIZE, SIZE, SRCCOPY);//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
	TransparentBlt(hMenDC, 180 + 32 + 32 + (Enermy.x - Player.x) * 32, 300 + (Enermy.y - Player.y) * 32, 32,32, hdcBmp, 8 * 12 + 9, 8*12+9, 12,12, RGB(0,0,0));
	DeleteObject(hdcBmp);
}

void PrintBackGround(HDC hdc, HINSTANCE hInst, HDC hMenDC)
{
	HBITMAP hBmp = nullptr; //ŒªÕº
	HDC hdcBmp = CreateCompatibleDC(hdc);
	hBmp = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP2));
	SelectObject(hdcBmp, hBmp);
	StretchBlt(hMenDC, -250, 0, 3440, 1440, hdcBmp, 0, 0, 3440, 1440, SRCCOPY);//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
	DeleteDC(hdcBmp);
	DeleteObject(hBmp);
}

void PrintDataBG(HDC hdc, HINSTANCE hInst, HDC hMenDC)
{
	HBITMAP hBmp = nullptr; //ŒªÕº
	HDC hdcBmp = CreateCompatibleDC(hdc);
	hBmp = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP3));
	SelectObject(hdcBmp, hBmp);
	StretchBlt(hMenDC, -5, -23, 354, 707, hdcBmp, 0, 0, 406, 572, SRCCOPY);//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
	DeleteDC(hdcBmp);
	DeleteObject(hBmp);
}

void PrintData(HDC hdc, HINSTANCE hInst, HDC hMenDC)
{
	LOGFONT lf = { 0 };
	lf.lfHeight = 25;
	HFONT hFont = CreateFontIndirect(&lf);
	HFONT hFontOld = (HFONT)SelectObject(hMenDC, hFont);
	SetBkMode(hMenDC, TRANSPARENT); //…Ë÷√±≥æ∞Œ™Õ∏√˜,“≤ø…“‘”√SetBkColor∫Ø ˝
	SetTextColor(hMenDC, RGB(0, 0, 0)); //…Ë÷√«∞æ∞—’…´

	TextOutA(hMenDC, 40, 70, "µ±«∞≥÷”–∑®æ˜£∫ ", strlen("µ±«∞≥÷”–∑®æ˜£∫"));
	//TextOutA(hMenDC, 40, 95, "µ±«∞≥÷”–‘™Àÿ£∫ ", strlen("µ±«∞≥÷”–‘™Àÿ£∫"));
	TextOutA(hMenDC, 40, 120, "µ±«∞≥÷”–µ¿æﬂ£∫ ", strlen("µ±«∞≥÷”–µ¿æﬂ£∫"));

	HBITMAP hBmpkey1 = nullptr; //ŒªÕº
	HBITMAP hBmpkey2 = nullptr; //ŒªÕº
	HBITMAP hBmpkey3 = nullptr; //ŒªÕº
	HBITMAP hBmpdig = nullptr; //ŒªÕº
	HBITMAP hBmpfly = nullptr; //ŒªÕº
	HBITMAP hBmprun = nullptr; //ŒªÕº
	HBITMAP hBmpstrong = nullptr; //ŒªÕº


	HDC hdcBmpkey1 = CreateCompatibleDC(hdc);
	HDC hdcBmpkey2 = CreateCompatibleDC(hdc);
	HDC hdcBmpkey3 = CreateCompatibleDC(hdc);
	HDC hdcBmpdig = CreateCompatibleDC(hdc);
	HDC hdcBmpfly = CreateCompatibleDC(hdc);
	HDC hdcBmprun = CreateCompatibleDC(hdc);
	HDC hdcBmpstrong = CreateCompatibleDC(hdc);

	hBmpkey1 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP10));
	hBmpkey2 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP11));
	hBmpkey3 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP12));
	hBmpdig = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP21));
	hBmpfly = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP22));
	hBmprun = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP23));
	hBmpstrong = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP24));

	SelectObject(hdcBmpkey1, hBmpkey1);
	SelectObject(hdcBmpkey2, hBmpkey2);
	SelectObject(hdcBmpkey3, hBmpkey3);
	SelectObject(hdcBmpdig, hBmpdig);
	SelectObject(hdcBmpfly, hBmpfly);
	SelectObject(hdcBmprun, hBmprun);
	SelectObject(hdcBmpstrong, hBmpstrong);

	if (key1)
		TransparentBlt(hMenDC, 200, 60, 48, 48, hdcBmpkey1, 0, 0, 12, 12, RGB(0, 0, 0));//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
	else if (key2)
		TransparentBlt(hMenDC, 200, 60, 48, 48, hdcBmpkey2, 0, 0, 12, 12, RGB(0, 0, 0));//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
	else if (key3)
		TransparentBlt(hMenDC, 200, 60, 48, 48, hdcBmpkey3, 0, 0, 12, 12, RGB(0, 0, 0));//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
	else
		TextOutA(hMenDC, 200, 70, "Œﬁ", strlen("Œﬁ"));
	char Dig[10] = { 0 }, Fly[10] = { 0 }, Run[10] = { 0 }, Strong[10] = { 0 };

	TextOutA(hMenDC, 180, 120, "µ£…Ω∏œ‘¬", strlen("µ£…Ω∏œ‘¬"));
	TransparentBlt(hMenDC, 265, 120, 20, 20, hdcBmpdig, 0, 0, 32, 32, RGB(255, 255, 255));
	TextOutA(hMenDC, 180, 145, "ΩÓ∂∑‘∆", strlen("ΩÓ∂∑‘∆"));
	TransparentBlt(hMenDC, 265, 145, 20, 20, hdcBmpfly, 0, 0, 24, 24, RGB(255, 255, 255));
	TextOutA(hMenDC, 180, 170, "Àıµÿ≥…¥Á", strlen("Àıµÿ≥…¥Á"));
	TransparentBlt(hMenDC, 265, 170, 20, 20, hdcBmprun, 0, 0, 32, 32, RGB(255, 255, 255));
	TextOutA(hMenDC, 180, 195, "Ω∏’÷Æ«˚", strlen("Ω∏’÷Æ«˚"));
	TransparentBlt(hMenDC, 265, 195, 20, 20, hdcBmpstrong, 0, 0, 32, 32, RGB(255, 255, 255));
	Dig[0] = dig + '0';
	Fly[0] = fly + '0';
	Run[0] = run + '0';
	Strong[0] = strong + '0';
	TextOutA(hMenDC, 290, 120, "X", strlen("X"));
	TextOutA(hMenDC, 290, 145, "X", strlen("X"));
	TextOutA(hMenDC, 290, 170, "X", strlen("X"));
	TextOutA(hMenDC, 290, 195, "X", strlen("X"));

	TextOutA(hMenDC, 310, 120, Dig, strlen(Dig));

	TextOutA(hMenDC, 310, 145, Fly, strlen(Fly));

	TextOutA(hMenDC, 310, 170, Run, strlen(Run));
	TextOutA(hMenDC, 310, 195, Strong, strlen(Strong));
	TextOutA(hMenDC, 40, 250, "µ±«∞—°÷–…ÒÕ®£∫", strlen("µ±«∞—°÷–…ÒÕ®£∫"));
	if(flag_h)
	TextOutA(hMenDC, 180, 250, "µ£…Ω∏œ‘¬", strlen("µ£…Ω∏œ‘¬"));
	else
		TextOutA(hMenDC, 180, 250, "ΩÓ∂∑‘∆", strlen("ΩÓ∂∑‘∆"));

	DeleteDC(hdcBmpkey1);
	DeleteDC(hdcBmpkey2);
	DeleteDC(hdcBmpkey3);
	DeleteDC(hdcBmpdig);
	DeleteDC(hdcBmpfly);
	DeleteDC(hdcBmprun);
	DeleteDC(hdcBmpstrong);
	DeleteObject(hBmpkey1);
	DeleteObject(hBmpkey2);
	DeleteObject(hBmpkey3);
	DeleteObject(hBmpdig);
	DeleteObject(hBmpfly);
	DeleteObject(hBmprun);
	DeleteObject(hBmpstrong);
	SelectObject(hMenDC, hFontOld);
	DeleteObject(hFont); //…æ≥˝∂‘œÛ
}

void MassagePrompt1(HWND hWnd,HDC hdc, HINSTANCE hInst, HDC hMenDC)
{
	if (!show && text_cnt1 == 9)
	{
 		HBITMAP hBmp = nullptr; //ŒªÕº
		HDC hdcBmp = CreateCompatibleDC(hdc);
		hBmp = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP13));
		SelectObject(hdcBmp, hBmp);
		//StretchBlt(hMenDC, 180, 300, 32, 32, hdcBmp, 3*32, 0, SIZE, SIZE, SRCCOPY);//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
		TransparentBlt(hMenDC, 60, 200, 400, 200, hdcBmp, 0, 0, 592, 357, RGB(255, 255, 255));
		DeleteDC(hdcBmp);
		DeleteObject(hBmp);
		LOGFONT lf = { 0 };
		lf.lfHeight = 30;
		HFONT hFont = CreateFontIndirect(&lf);
		HFONT hFontOld = (HFONT)SelectObject(hMenDC, hFont);
		SetBkMode(hMenDC, TRANSPARENT); //…Ë÷√±≥æ∞Œ™Õ∏√˜,“≤ø…“‘”√SetBkColor∫Ø ˝
		SetTextColor(hMenDC, RGB(255, 255, 255)); //…Ë÷√«∞æ∞—’…´
		TextOutA(hMenDC, 236, 207, "Ã· æ", strlen("Ã· æ"));
		lf.lfHeight = 20;
		hFont = CreateFontIndirect(&lf);
		hFontOld = (HFONT)SelectObject(hMenDC, hFont);
		SetTextColor(hMenDC, RGB(0, 0, 0)); //…Ë÷√«∞æ∞—’…´
		if (text_cnt == 0)
		{
			TextOutA(hMenDC, 100, 270, "≤Ÿøÿø…Õ®π˝WASD¿¥“∆∂Ø°£hº¸«–ªªµ£…Ω∏œ‘¬∫ÕΩÓ", strlen("≤Ÿøÿø…Õ®π˝WASD¿¥“∆∂Ø°£hº¸«–ªªµ£…Ω∏œ‘¬∫ÕΩÓ"));
			TextOutA(hMenDC, 100, 295, "∂∑‘∆µ¿æﬂ π”√,jº¸ÀıµÿÀıµÿ≥…¥Á,kº¸√‘ŒÌø™πÿ", strlen("∂∑‘∆µ¿æﬂ π”√,jº¸Àıµÿ≥…¥Á,kº¸√‘ŒÌø™πÿ"));
			TextOutA(hMenDC, 100, 320, ",lº¸Ω∏’÷Æ«˚,hº¸«–ªªµ£…Ω∏œ‘¬∫ÕΩÓ∂∑‘∆µ¿æﬂ π”√°£", strlen(",lº¸Ω∏’÷Æ«˚,hº¸«–ªªµ£…Ω∏œ‘¬∫ÕΩÓ∂∑‘∆µ¿æﬂ π”√°£"));
		}
		else if (text_cnt == 1)
		{
			TextOutA(hMenDC, 100, 270, "µÿÕº…œª·ÀÊª˙…˙≥…±¶œ‰£¨≤ªÕ¨ Ù–‘µƒ±¶œ‰–Ë“™", strlen("µÿÕº…œª·ÀÊª˙…˙≥…±¶œ‰£¨≤ªÕ¨ Ù–‘µƒ±¶œ‰–Ë“™"));
			TextOutA(hMenDC, 100, 295, "∂‘”¶ Ù–‘µƒ∑®æ˜¿¥ø™∆Ù°£", strlen("∂‘”¶ Ù–‘µƒ‘ø≥◊¿¥ø™∆Ù°£"));
			TextOutA(hMenDC, 100, 320, "µ±µÿÕº…œ»´≤ø±¶œ‰∂ºø™∆Ù∫Û£¨∑Ωø…¥Úø™µÿµ¿°£", strlen("µ±µÿÕº…œ»´≤ø±¶œ‰∂ºø™∆Ù∫Û£¨∑Ωø…¥Úø™µÿµ¿°£"));
		}
		else if (text_cnt == 2)
		{
			TextOutA(hMenDC, 100, 270, "”–µƒ±¶œ‰ª·±ª«Ω±⁄∞¸Œß£¨’‚ ±ƒ„ø…“‘¿˚”√ ÷÷–", strlen("”–µƒ±¶œ‰ª·±ª«Ω±⁄∞¸Œß£¨’‚ ±ƒ„ø…“‘¿˚”√ ÷÷–"));
			TextOutA(hMenDC, 100, 295, "µƒµ¿æﬂ£¨»Áπ˚µ¿æﬂ≤ªπª£¨ø…“‘Õ®π˝¥Ú∆∆πﬁ◊”ªÒµ√°£", strlen("µƒµ¿æﬂ£¨»Áπ˚µ¿æﬂ≤ªπª£¨ø…“‘Õ®π˝¥Ú∆∆πﬁ◊”ªÒµ√°£"));
		}
		else if (text_cnt == 5)
		{ 
			TextOutA(hMenDC, 100, 270, "ƒ„ªÒµ√¡À", strlen("ƒ„ªÒµ√¡À"));
			SetTextColor(hMenDC, RGB(255, 0, 0)); //…Ë÷√«∞æ∞—’…´
			TextOutA(hMenDC, 170, 270, "ª‘™Àÿ∑®æ˜", strlen("ª‘™Àÿ∑®æ˜"));
		}
		else if (text_cnt == 7)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„ªÒµ√¡À", strlen("ƒ„ªÒµ√¡À"));
			SetTextColor(hMenDC, RGB(0, 0, 255)); //…Ë÷√«∞æ∞—’…´
			TextOutA(hMenDC, 170, 270, "ÀÆ‘™Àÿ∑®æ˜", strlen("ÀÆ‘™Àÿ∑®æ˜"));
		}
		else if (text_cnt == 9)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„ªÒµ√¡À", strlen("ƒ„ªÒµ√¡À"));
			SetTextColor(hMenDC, RGB(0, 255, 0)); //…Ë÷√«∞æ∞—’…´
			TextOutA(hMenDC, 170, 270, "ƒæ‘™Àÿ∑®æ˜", strlen("ƒæ‘™Àÿ∑®æ˜"));
		}
		else if (text_cnt == 19)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„ªÒµ√¡À", strlen("ƒ„ªÒµ√¡À"));
			TextOutA(hMenDC, 170, 270, "Àıµÿ≥…¥Á", strlen("Àıµÿ≥…¥Á"));

		}
		else if (text_cnt == 21)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„ªÒµ√¡À", strlen("ƒ„ªÒµ√¡À"));
			TextOutA(hMenDC, 170, 270, "µ£…Ω∏œ‘¬", strlen("µ£…Ω∏œ‘¬"));

		}
		else if (text_cnt == 23)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„ªÒµ√¡À", strlen("ƒ„ªÒµ√¡À"));
			TextOutA(hMenDC, 170, 270, "ΩÓ∂∑‘∆", strlen("ΩÓ∂∑‘∆"));

		}
		else if (text_cnt == 25)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„ªÒµ√¡À", strlen("ƒ„ªÒµ√¡À"));
			TextOutA(hMenDC, 170, 270, "Ω∏’÷Æ«˚", strlen("Ω∏’÷Æ«˚"));

		}
		else if (text_cnt == 11)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„¥Úø™¡À", strlen("ƒ„¥Úø™¡À"));
			SetTextColor(hMenDC, RGB(255, 0, 0)); //…Ë÷√«∞æ∞—’…´
			TextOutA(hMenDC, 170, 270, "ª‘™Àÿ±¶œ‰", strlen("ª‘™Àÿ±¶œ‰"));
		}
		else if (text_cnt == 13)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„¥Úø™¡À", strlen("ƒ„¥Úø™¡À"));
			SetTextColor(hMenDC, RGB(0, 0, 255)); //…Ë÷√«∞æ∞—’…´
			TextOutA(hMenDC, 170, 270, "ÀÆ‘™Àÿ±¶œ‰", strlen("ÀÆ‘™Àÿ±¶œ‰"));
		}
		else if (text_cnt == 15)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„¥Úø™¡À", strlen("ƒ„¥Úø™¡À"));
			SetTextColor(hMenDC, RGB(0, 255, 0)); //…Ë÷√«∞æ∞—’…´
			TextOutA(hMenDC, 170, 270, "ƒæ‘™Àÿ±¶œ‰", strlen("ƒæ‘™Àÿ±¶œ‰"));
		}
		else if (text_cnt == 17)
		{
			TextOutA(hMenDC, 100, 270, "µÿµ¿“—æ≠¥Úø™¡À°£", strlen("µÿµ¿“—æ≠¥Úø™¡À°£"));
		}
		else if (text_cnt == 27)
		{
			TextOutA(hMenDC, 100, 270, "ƒ„“—Ω¯»Îœ¬“ªπÿ°£", strlen("ƒ„“—Ω¯»Îœ¬“ªπÿ°£"));
		}
		else if (text_cnt == 29)
		{
			TextOutA(hMenDC, 100, 270, "”Œœ∑Ω· ¯°£", strlen("”Œœ∑Ω· ¯°£"));
		}
		else if (text_cnt == 31)
		{
			TextOutA(hMenDC, 100, 270, "∏√À¿!ƒ„±ª◊•◊°¡À,«Î÷ÿ–¬‘Ÿ¿¥°£",strlen("∏√À¿!ƒ„±ª◊•◊°¡À°£«Î÷ÿ–¬‘Ÿ¿¥°£"));
		}
		SetTextColor(hMenDC, RGB(0, 0, 0)); //…Ë÷√«∞æ∞—’…´
		TextOutA(hMenDC, 300, 340, "[>∞¥ø’∏Òº¸ºÃ–¯<]", strlen("[>∞¥ø’∏Òº¸ºÃ–¯<]"));
		SelectObject(hMenDC, hFontOld);
		DeleteObject(hFont); //…æ≥˝∂‘œÛ

	}
}

void Show(HDC hdc, HINSTANCE hInst, HDC hMenDC)
{
	HBITMAP hBmpshow = nullptr; //ŒªÕº
	HBITMAP hBmp1 = nullptr; //ŒªÕº
	HBITMAP hBmp2 = nullptr; //ŒªÕº
	HBITMAP hBmp3 = nullptr; //ŒªÕº

	HDC hdcBmpshow = CreateCompatibleDC(hdc);
	HDC hdcBmp1 = CreateCompatibleDC(hdc);
	HDC hdcBmp2 = CreateCompatibleDC(hdc);
	HDC hdcBmp3 = CreateCompatibleDC(hdc);

	hBmpshow = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP17));
	hBmp1 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP18));
	hBmp2 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP19));
	hBmp3 = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP20));

	SelectObject(hdcBmpshow, hBmpshow);
	SelectObject(hdcBmp1, hBmp1);
	SelectObject(hdcBmp2, hBmp2);
	SelectObject(hdcBmp3, hBmp3);

	TransparentBlt(hMenDC, 0, 475, 1200, 200, hdcBmpshow, 140, 0, 500, 182, RGB(255, 255, 255));

	DeleteObject(hdcBmpshow);
	DeleteObject(hBmpshow);


	LOGFONT lf = { 0 };
	lf.lfHeight = 17;//◊÷ÃÂ¥Û–°
	HFONT hFont = CreateFontIndirect(&lf);
	HFONT hFontOld = (HFONT)SelectObject(hMenDC, hFont);
	SetBkMode(hMenDC, TRANSPARENT); 
	SetTextColor(hMenDC, RGB(0, 0, 0));
	if (text_cnt1 == 0)
	{
		lf.lfHeight = 15;
		hFont = CreateFontIndirect(&lf);
		hFontOld = (HFONT)SelectObject(hMenDC, hFont);
		TransparentBlt(hMenDC, -35, 460, 150, 150, hdcBmp1, 0, 0, 168, 223, RGB(255, 255, 255));//Ã∆…Æ
		TransparentBlt(hMenDC, 410, 470, 90, 140, hdcBmp3, 0, 0, 65, 85, RGB(255, 255, 255));//»˝¥Ûœ…÷Æª¢
		TextOutA(hMenDC, 110, 510, "(Ã∆…Æ±ª»˝¥Ûœ…◊•◊ﬂ£¨ÀÔŒÚø’ ß»•ŒÂ––÷Æ¡¶µ•»À«±»Î»˝¥Ûœ…", strlen("Ã∆…Æ±ª»˝¥Ûœ…◊•◊ﬂ£¨ÀÔŒÚø’ ß»•ŒÂ––÷Æ¡¶µ•»À«±»Î»˝¥Ûœ… "));
		TextOutA(hMenDC, 77, 535, "∂¥—®¥Óæ»Ã∆…Æ°£–Ë“™ªÒµ√ŒÂ––÷Æ¡¶¿¥ª˜∞‹»˝¥Ûœ…°£»˝¥Ûœ…∞—ŒÂ––", strlen("∂¥—®¥Óæ»Ã∆…Æ°£–Ë“™ªÒµ√ŒÂ––÷Æ¡¶¿¥ª˜∞‹»˝¥Ûœ…°£»˝¥Ûœ…∞—ŒÂ––"));
		TextOutA(hMenDC, 77, 560, "÷Æ¡¶∑‚”°‘⁄»˝∏ˆ∫˘¬´£®±¶œ‰£©÷–°£—∞’“∂‘”¶µƒ∑®æˆ£®‘ø≥◊£©¥Úø™", strlen("÷Æ¡¶∑‚”°‘⁄»˝∏ˆ∫˘¬´£®±¶œ‰£©÷–°£—∞’“∂‘”¶µƒ∑®æˆ£®‘ø≥◊£©¥Úø™"));
		TextOutA(hMenDC, 77, 585, "∫˘¬´£®±¶œ‰£©£¨ªÒµ√ ß»•µƒŒÂ––÷Æ¡¶¿¥¥Ú∞‹ª¢¬π—Ú»˝¥Ûœ…)", strlen("∫˘¬´£®±¶œ‰£©£¨ªÒµ√ ß»•µƒŒÂ––÷Æ¡¶¿¥¥Ú∞‹ª¢¬π—Ú»˝¥Ûœ…)"));
	}
	else if (text_cnt1 == 1)
	{
 		TransparentBlt(hMenDC, -30, 460, 150, 150, hdcBmp1, 0, 0, 168, 223, RGB(255, 255, 255));//Ã∆…Æ
		TransparentBlt(hMenDC, 385, 450, 150, 150, hdcBmp2, 0, 0, 211, 222, RGB(0, 0, 0));//ŒÚø’
		TextOutA(hMenDC, 105, 515, "ÀÔŒÚø’∫ÕÃ∆…Æ‘⁄º“¿Ô–¥øŒ…Ë£¨∫ˆ»ª“ª’Û—˝∑Á", strlen("ÀÔŒÚø’∫ÕÃ∆…Æ‘⁄º“¿Ô–¥øŒ…Ë£¨∫ˆ»ª“ª’Û—˝"));
		TextOutA(hMenDC, 105, 540, "¥µπ˝£¨—€º˚ƒ«Ã∆…Æ±ªƒ«∑ÁæÌ◊ﬂ°£", strlen("¥µπ˝£¨—€º˚ƒ«Ã∆…Æ±ªƒ«∑ÁæÌ◊ﬂ°£"));
	}
	else if (text_cnt1 == 2)
	{
		TransparentBlt(hMenDC, -30, 460, 150, 150, hdcBmp1, 0, 0, 168, 223, RGB(255, 255, 255));//Ã∆…Æ
		TransparentBlt(hMenDC, 385, 450, 150, 150, hdcBmp2, 0, 0, 211, 222, RGB(0, 0, 0));//ŒÚø’
		TextOutA(hMenDC, 105, 515, "Ã∆…Æ◊Ï¿Ô¥Û∫∞◊≈£∫°∞ŒÚø’£¨æ»Œ“°±°£", strlen("Ã∆…Æ◊Ï¿Ô¥Û∫∞◊≈£∫°∞ŒÚø’£¨æ»Œ“°±°£"));
	}
	else if (text_cnt1 == 3)
	{
		TransparentBlt(hMenDC, -10, 450, 150, 150, hdcBmp2, 0, 0, 211, 222, RGB(0, 0, 0));//ŒÚø’
		TransparentBlt(hMenDC, 410, 470, 90, 140, hdcBmp3, 0, 0, 65, 85, RGB(255, 255, 255));//»˝¥Ûœ…÷Æª¢
		TextOutA(hMenDC, 80, 515, "ÀÔŒÚø’£®◊≈º±µƒπ€Õ˚£¨—≠∑Á“ªŒ≈£¨‘≠¿¥ «ƒ«ª¢", strlen("ÀÔŒÚø’£®◊≈º±µƒπ€Õ˚£¨—≠∑Á“ªŒ≈£¨‘≠¿¥ «ƒ«ª¢"));
		TextOutA(hMenDC, 80, 540, "¬π—Ú»˝¥Ûœ…),¥Û∫∞£∫—˝π÷ƒƒ¿Ô◊ﬂ£°ÀÊº¥◊∑…œ»•°£", strlen("¬π—Ú»˝¥Ûœ…),¥Û∫∞£∫—˝π÷ƒƒ¿Ô◊ﬂ£°ÀÊº¥◊∑…œ»•°£"));
	}
	else if (text_cnt1 == 4)
	{
		TransparentBlt(hMenDC, 0, 470, 90, 140, hdcBmp3, 0, 0, 65, 85, RGB(255, 255, 255));//»˝¥Ûœ…÷Æª¢
		TextOutA(hMenDC, 90, 515, "»˝¥Ûœ…£®≈◊≥ˆ¿¶œ……Ò£©¥Û–¶£∫ÀÔŒÚø’£¨ƒ„µƒŒÂ––÷Æ¡¶“—æ≠", strlen("»˝¥Ûœ…£®≈◊≥ˆ¿¶œ……Ò£©¥Û–¶£∫ÀÔŒÚø’£¨ƒ„µƒŒÂ––÷Æ¡¶“‘º∞"));
		TextOutA(hMenDC, 90, 540, "±ª’‚¿¶œ……Ò ¯∏ø◊°¡À°£ø¥ƒ„ªπ‘ı√¥¿¥æ»ƒ„ ¶∏µ£°π˛π˛π˛!", strlen("±ª’‚¿¶œ……Ò ¯∏ø◊°¡À°£ø¥ƒ„ªπ‘ı√¥¿¥æ»ƒ„ ¶∏µ£°π˛π˛π˛!"));

	}
	else if (text_cnt1 == 5)
	{
		TransparentBlt(hMenDC, 0, 470, 90, 140, hdcBmp3, 0, 0, 65, 85, RGB(255, 255, 255));//»˝¥Ûœ…÷Æª¢
		TransparentBlt(hMenDC, 385, 450, 150, 150, hdcBmp2, 0, 0, 211, 222, RGB(0, 0, 0));//ŒÚø’
		TextOutA(hMenDC, 90, 515, "»˝¥Ûœ…£®’æ™£©£∫ÀÔŒÚø’ƒ„ ß»•¡ÀŒÂ––÷Æ¡¶", strlen("»˝¥Ûœ…£®’æ™£©£∫ÀÔŒÚø’ƒ„ ß»•¡ÀŒÂ––÷Æ¡¶"));
		TextOutA(hMenDC, 90, 540, "æ”»ªƒ‹◊∑µΩ’‚¿Ô¿¥£ø≤ªπ˝÷ªªÒµ√¡À»˝÷÷≤–»±", strlen("æ”»ªƒ‹◊∑µΩ’‚¿Ô¿¥£ø≤ªπ˝÷ªªÒµ√¡À»˝÷÷≤–»±"));
		TextOutA(hMenDC, 90, 565, "ŒÂ––÷Æ¡¶µƒƒ„£¨“ª—˘’Ω §≤ª¡ÀŒ“√«»˝–÷µ‹µƒ", strlen("ŒÂ––÷Æ¡¶µƒƒ„£¨“ª—˘’Ω §≤ª¡ÀŒ“√«»˝–÷µ‹µƒ"));
		TextOutA(hMenDC, 90, 590, "°£ø¥¥Ú£°", strlen("°£ø¥¥Ú£°"));
	}
	else if (text_cnt1 == 6)
	{
		TransparentBlt(hMenDC, -10, 450, 150, 150, hdcBmp2, 0, 0, 211, 222, RGB(0, 0, 0));//ŒÚø’
		TransparentBlt(hMenDC, 410, 470, 90, 140, hdcBmp3, 0, 0, 65, 85, RGB(255, 255, 255));//»˝¥Ûœ…÷Æª¢
		TextOutA(hMenDC, 90, 515, "ÀÔŒÚø’£®≤ª–º£©£∫«¯«¯»˝÷ª◊ﬂ ﬁ“≤∏“Õ˝≥∆¥Û", strlen("ÀÔŒÚø’£®≤ª–º£©£∫«¯«¯»˝÷ª◊ﬂ ﬁ“≤∏“Õ˝≥∆¥Û"));
		TextOutA(hMenDC, 90, 540, "œ…£øø¥∞≥¿œÀÔΩÒÃÏ‘ı√¥ΩÃ—µƒ„√«£°", strlen("œ…£øø¥∞≥¿œÀÔΩÒÃÏ‘ı√¥ΩÃ—µƒ„√«£°"));
	}
	else if (text_cnt1 == 7)
	{
		TransparentBlt(hMenDC, 0, 470, 90, 140, hdcBmp3, 0, 0, 65, 85, RGB(255, 255, 255));//»˝¥Ûœ…÷Æª¢
		TextOutA(hMenDC, 90, 515, "»˝¥Ûœ…£®±ª¥Ú≈øœ¬£©£∫»ƒ√¸£°¥Û •»ƒ√¸£°Ã∆…ÆæÕ‘⁄∫Û√Ê", strlen("»˝¥Ûœ…£®±ª¥Ú≈øœ¬£©£∫»ƒ√¸£°¥Û •»ƒ√¸£°Ã∆…ÆæÕ‘⁄∫Û√Ê"));
		TextOutA(hMenDC, 90, 540, "µƒµÿ¿Œ¿Ô£°", strlen("µƒµÿ¿Œ¿Ô£°"));
	}
	else if (text_cnt1 == 8)
	{
		TransparentBlt(hMenDC, -30, 460, 150, 150, hdcBmp1, 0, 0, 168, 223, RGB(255, 255, 255));//Ã∆…Æ
		TransparentBlt(hMenDC, 385, 450, 150, 150, hdcBmp2, 0, 0, 211, 222, RGB(0, 0, 0));//ŒÚø’
		TextOutA(hMenDC, 105, 515, "ÀÔŒÚø’æ»ªÿ¡ÀÃ∆…Æ£¨¡Ω»À∏ﬂ∏ﬂ–À–Àµƒªÿ»•", strlen("ÀÔŒÚø’æ»ªÿ¡ÀÃ∆…Æ£¨¡Ω»À∏ﬂ∏ﬂ–À–Àµƒªÿ»•"));
		TextOutA(hMenDC, 105, 540, "–¥øŒ…Ë¡À°£", strlen("–¥øŒ…Ë¡À°£"));
		show = false;
	}

	TextOutA(hMenDC, 340, 620, "[>∞¥ø’∏Òº¸ºÃ–¯<]", strlen("[>∞¥ø’∏Òº¸ºÃ–¯<]"));
	DeleteObject(hdcBmp1);
	DeleteObject(hdcBmp2);
	DeleteObject(hdcBmp3);

	DeleteObject(hBmp1);
	DeleteObject(hBmp2);
	DeleteObject(hBmp3);
}


void Init(HDC hdc, HINSTANCE hInst, HDC hMenDC)
{
	PlaySound(L"Resource\\ø™ º“Ù¿÷.wav", NULL, SND_FILENAME | SND_ASYNC);
	HBITMAP hBmp_bk = nullptr; //ŒªÕº
	HBITMAP hBmp_start = nullptr; //ŒªÕº
	HBITMAP hBmp_end = nullptr; //ŒªÕº

	HDC hdcBmp_bk = CreateCompatibleDC(hdc);
	HDC hdcBmp_start = CreateCompatibleDC(hdc);
	HDC hdcBmp_end = CreateCompatibleDC(hdc);

	hBmp_bk = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP14));
	hBmp_start = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP15));
	hBmp_end = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP16));

	SelectObject(hdcBmp_bk, hBmp_bk);
	SelectObject(hdcBmp_start, hBmp_start);
	SelectObject(hdcBmp_end, hBmp_end);

	TransparentBlt(hMenDC, -200, -100, 1398, 786, hdcBmp_bk, 0, 0, 1398, 786, SRCCOPY);//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
	TransparentBlt(hMenDC, 120, 170, 150, 60, hdcBmp_start, 0, 0, 122, 38, RGB(255, 255, 255));//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº
	TransparentBlt(hMenDC, 120, 300, 150, 60, hdcBmp_end, 0, 0, 122, 38, RGB(255, 255, 255));//‘⁄ƒ⁄¥ÊDC…œÃ˘Õº

	DeleteObject(hdcBmp_bk);
	DeleteObject(hdcBmp_start);
	DeleteObject(hdcBmp_end);
}


void PosJudge(int y,int x, WPARAM wParam)
{
	if (Map[Player.y][Player.x] == 6 && key1 && (Map[Player.y][Player.x] = 20))//¥Úø™∫Ïœ‰◊”
	{
		chest1 = true;
		key_cnt = false;
		key1 = false;
		text_cnt = 11;
		Map[Player.y][Player.x] == 20;
		PlaySound(L"Resource\\±¶œ‰.wav", NULL, SND_FILENAME | SND_ASYNC);
	}
	else if (Map[Player.y][Player.x] == 7 && key2 && (Map[Player.y][Player.x] = 21))//¥Úø™¿∂œ‰◊”
	{
		key_cnt = false;
		key2 = false;
		chest2 = true;
		text_cnt = 13;
		PlaySound(L"Resource\\±¶œ‰.wav", NULL, SND_FILENAME | SND_ASYNC);
	}
	else if (Map[Player.y][Player.x] == 8 && key3 && (Map[Player.y][Player.x] = 22))//¥Úø™¬Ãœ‰◊”
	{
		key_cnt = false;
		key3 = false;
		chest3 = true;
		text_cnt = 15;
		Map[Player.y][Player.x] == 22;
		PlaySound(L"Resource\\±¶œ‰.wav", NULL, SND_FILENAME | SND_ASYNC);

	}
	else if (Map[Player.y][Player.x] == 11 && (key1_cnt = true) && !key_cnt)//≥÷”–∫Ï‘ø≥◊
	{
		PlaySound(L"Resource\\πﬁ◊”.wav", NULL, SND_FILENAME | SND_ASYNC);
		Map[Player.y][Player.x] = 15;
		key1 = true;
		key_cnt = true;
		text_cnt = 5;
	}
	else if (Map[Player.y][Player.x] == 12 && (key2_cnt = true) && !key_cnt)//≥÷”–¿∂‘ø≥◊
	{
		PlaySound(L"Resource\\πﬁ◊”.wav", NULL, SND_FILENAME | SND_ASYNC);
		Map[Player.y][Player.x] = 15;
		key2 = true;
		key_cnt = true;
		text_cnt = 7;
	}
	else if (Map[Player.y][Player.x] == 13 && (key3_cnt = true) && !key_cnt)//≥÷”–¬Ã‘ø≥◊
	{
		PlaySound(L"Resource\\πﬁ◊”.wav", NULL, SND_FILENAME | SND_ASYNC);
		Map[Player.y][Player.x] = 15;
		key3 = true;
		key_cnt = true;
		text_cnt = 9;
	}
	else if (Map[Player.y][Player.x] == 16)
	{
		PlaySound(L"Resource\\πﬁ◊”.wav", NULL, SND_FILENAME | SND_ASYNC);
		Map[Player.y][Player.x] = 15;
		dig++;
		text_cnt = 21;
	}
	else if (Map[Player.y][Player.x] == 17)
	{
		PlaySound(L"Resource\\πﬁ◊”.wav", NULL, SND_FILENAME | SND_ASYNC);
		Map[Player.y][Player.x] = 15;
		fly++;
		text_cnt = 23;
	}
	else if (Map[Player.y][Player.x] == 18)
	{
		PlaySound(L"Resource\\πﬁ◊”.wav", NULL, SND_FILENAME | SND_ASYNC);
		Map[Player.y][Player.x] = 15;
		text_cnt = 19;
		run++;
	}
	else if (Map[Player.y][Player.x] == 19)
	{
		PlaySound(L"Resource\\πﬁ◊”.wav", NULL, SND_FILENAME | SND_ASYNC);
		Map[Player.y][Player.x] = 15;
		strong++;
		text_cnt = 25;
	}
	else if (Map[Player.y][Player.x] == 1 && dig > 0 && flag_h)//µ£…Ω∏œ‘¬
	{
		Map[Player.y][Player.x] = 0;
		dig--;
	}
	else if (Map[Player.y][Player.x] == 1 && fly > 0 && !flag_h)//ΩÓ∂∑‘∆
	{
		while (Map[Player.y][Player.x] == 1)
		{
			if (wParam == 'W')
				Player.y--;
			else if (wParam == 'A')
				Player.x--;
			else if (wParam == 'S')
				Player.y++;
			else if (wParam == 'D')
				Player.x++;
		}
		fly--;
	}
	else if (Map[Player.y][Player.x] == 1 && dig > 0)
	{
		Map[Player.y][Player.x] = 0;
		dig--;
	}
	else if (1 == level && chest1 && chest2 && !next_cnt)
	{
		next_cnt = true;
		text_cnt = 17;
	}
	else if (2 == level && chest1 && chest2 && chest3 && !next_cnt)
	{
		next_cnt = true;
		text_cnt = 17;
	}else if (Enermy.x==Player.x&&Player.y==Enermy.y && strong > 0)
	{
		while (1)
		{
			int i = (rand() % 29) + 1;
			int j = (rand() % 29) + 1;
			Enermy.x = i;
			Enermy.y = j;
			if (Map[Enermy.y][Enermy.x] == 0)
				break;
		}
		strong--;
	}
	if (Map[Player.y][Player.x] == 14 || Map[Player.y][Player.x] == 16 || Map[Player.y][Player.x] == 17 || Map[Player.y][Player.x] == 18 || Map[Player.y][Player.x] == 19)
	{
		PlaySound(L"Resource\\πﬁ◊”.wav", NULL, SND_FILENAME | SND_ASYNC);
		Map[Player.y][Player.x] = 15;
	}
	if (Map[Player.y][Player.x] != 0 && Map[Player.y][Player.x] != 4
		&& Map[Player.y][Player.x] != 9 && Map[Player.y][Player.x] != 10
		&& Map[Player.y][Player.x] != 11 && Map[Player.y][Player.x] != 12
		&& Map[Player.y][Player.x] != 13 && Map[Player.y][Player.x] != 14
		&& Map[Player.y][Player.x] != 15 && Map[Player.y][Player.x] != 16
		&& Map[Player.y][Player.x] != 17 && Map[Player.y][Player.x] != 18
		&& Map[Player.y][Player.x] != 19)
	{
		Player.y = y;
		Player.x = x;
	}
	if (Player.y == Enermy.y && Player.x == Enermy.x)
	{
		text_cnt = 31;
	}
}

void game(HWND hWnd,HDC hdc, HINSTANCE hInst)
{
	HDC hMap = CreateCompatibleDC(hdc);
	HDC hData = CreateCompatibleDC(hdc);
	HDC hInit = CreateCompatibleDC(hdc);

	HBITMAP hMapBmp = CreateCompatibleBitmap(hdc, 500, 720);
	HBITMAP hDataBmp = CreateCompatibleBitmap(hdc, 360, 720);
	HBITMAP hInitBmp = CreateCompatibleBitmap(hdc, 860, 720);

	SelectObject(hMap, hMapBmp);
	SelectObject(hData, hDataBmp);
	SelectObject(hInit, hInitBmp);

	if (start)
	{
		PrintBackGround(hdc, hInst, hMap);
		PrintDataBG(hdc, hInst, hData);
		PrintMap1(hdc, hInst, hMap);
		PrintPlayer(hdc, hInst, hMap);
		PrintEnermy(hdc, hInst, hMap);
		PrintData(hdc, hInst, hData);

		if (show)
		{
			Show(hdc, hInst, hMap);
		}

		if (text_cnt < 3 || text_cnt == 5 || text_cnt == 7 || text_cnt == 9 || text_cnt == 11 || text_cnt == 13 || text_cnt == 15 || text_cnt == 17 || text_cnt == 19 || text_cnt == 21 || text_cnt == 23 || text_cnt == 25 || text_cnt == 29||text_cnt==31)
		{
			MassagePrompt1(hWnd,hdc, hInst, hMap);
		}
		if (text_cnt == 31)
		{
			SendMessage(hWnd, CREATEMAP, 0, 0);
		}
		BitBlt(hdc, 0, 0, 500, 720, hMap, 0, 0, SRCCOPY);
		BitBlt(hdc, 500, 0, 360, 720, hData, 0, 0, SRCCOPY);
	}
	else if (!start)
	{
		Init(hdc, hInst, hInit);
		BitBlt(hdc, 0, 0, 1080, 720, hInit, 0, 0, SRCCOPY);
	}
	DeleteDC(hMap);
	DeleteDC(hData);
	DeleteObject(hDataBmp);
	DeleteObject(hMapBmp);
}